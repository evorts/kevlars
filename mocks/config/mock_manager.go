// Code generated by mockery v2.42.3. DO NOT EDIT.

package config

import (
	config "github.com/evorts/kevlars/config"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// AllSettings provides a mock function with given fields:
func (_m *Manager) AllSettings() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllSettings")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Manager_AllSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllSettings'
type Manager_AllSettings_Call struct {
	*mock.Call
}

// AllSettings is a helper method to define mock.On call
func (_e *Manager_Expecter) AllSettings() *Manager_AllSettings_Call {
	return &Manager_AllSettings_Call{Call: _e.mock.On("AllSettings")}
}

func (_c *Manager_AllSettings_Call) Run(run func()) *Manager_AllSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_AllSettings_Call) Return(_a0 map[string]interface{}) *Manager_AllSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_AllSettings_Call) RunAndReturn(run func() map[string]interface{}) *Manager_AllSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *Manager) Get(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Manager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Manager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) Get(key interface{}) *Manager_Get_Call {
	return &Manager_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Manager_Get_Call) Run(run func(key string)) *Manager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_Get_Call) Return(_a0 interface{}) *Manager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Get_Call) RunAndReturn(run func(string) interface{}) *Manager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function with given fields: key
func (_m *Manager) GetBool(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Manager_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type Manager_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetBool(key interface{}) *Manager_GetBool_Call {
	return &Manager_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *Manager_GetBool_Call) Run(run func(key string)) *Manager_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetBool_Call) Return(_a0 bool) *Manager_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetBool_Call) RunAndReturn(run func(string) bool) *Manager_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoolOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetBoolOrElse(key string, elseValue bool) bool {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetBoolOrElse")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = rf(key, elseValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Manager_GetBoolOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoolOrElse'
type Manager_GetBoolOrElse_Call struct {
	*mock.Call
}

// GetBoolOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue bool
func (_e *Manager_Expecter) GetBoolOrElse(key interface{}, elseValue interface{}) *Manager_GetBoolOrElse_Call {
	return &Manager_GetBoolOrElse_Call{Call: _e.mock.On("GetBoolOrElse", key, elseValue)}
}

func (_c *Manager_GetBoolOrElse_Call) Run(run func(key string, elseValue bool)) *Manager_GetBoolOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Manager_GetBoolOrElse_Call) Return(_a0 bool) *Manager_GetBoolOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetBoolOrElse_Call) RunAndReturn(run func(string, bool) bool) *Manager_GetBoolOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function with given fields: key
func (_m *Manager) GetDuration(key string) time.Duration {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Manager_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type Manager_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetDuration(key interface{}) *Manager_GetDuration_Call {
	return &Manager_GetDuration_Call{Call: _e.mock.On("GetDuration", key)}
}

func (_c *Manager_GetDuration_Call) Run(run func(key string)) *Manager_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetDuration_Call) Return(_a0 time.Duration) *Manager_GetDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetDuration_Call) RunAndReturn(run func(string) time.Duration) *Manager_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetDurationOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetDurationOrElse(key string, elseValue time.Duration) time.Duration {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetDurationOrElse")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string, time.Duration) time.Duration); ok {
		r0 = rf(key, elseValue)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Manager_GetDurationOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDurationOrElse'
type Manager_GetDurationOrElse_Call struct {
	*mock.Call
}

// GetDurationOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue time.Duration
func (_e *Manager_Expecter) GetDurationOrElse(key interface{}, elseValue interface{}) *Manager_GetDurationOrElse_Call {
	return &Manager_GetDurationOrElse_Call{Call: _e.mock.On("GetDurationOrElse", key, elseValue)}
}

func (_c *Manager_GetDurationOrElse_Call) Run(run func(key string, elseValue time.Duration)) *Manager_GetDurationOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *Manager_GetDurationOrElse_Call) Return(_a0 time.Duration) *Manager_GetDurationOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetDurationOrElse_Call) RunAndReturn(run func(string, time.Duration) time.Duration) *Manager_GetDurationOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat64 provides a mock function with given fields: key
func (_m *Manager) GetFloat64(key string) float64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat64")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Manager_GetFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat64'
type Manager_GetFloat64_Call struct {
	*mock.Call
}

// GetFloat64 is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetFloat64(key interface{}) *Manager_GetFloat64_Call {
	return &Manager_GetFloat64_Call{Call: _e.mock.On("GetFloat64", key)}
}

func (_c *Manager_GetFloat64_Call) Run(run func(key string)) *Manager_GetFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetFloat64_Call) Return(_a0 float64) *Manager_GetFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetFloat64_Call) RunAndReturn(run func(string) float64) *Manager_GetFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat64OrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetFloat64OrElse(key string, elseValue float64) float64 {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat64OrElse")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, float64) float64); ok {
		r0 = rf(key, elseValue)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Manager_GetFloat64OrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat64OrElse'
type Manager_GetFloat64OrElse_Call struct {
	*mock.Call
}

// GetFloat64OrElse is a helper method to define mock.On call
//   - key string
//   - elseValue float64
func (_e *Manager_Expecter) GetFloat64OrElse(key interface{}, elseValue interface{}) *Manager_GetFloat64OrElse_Call {
	return &Manager_GetFloat64OrElse_Call{Call: _e.mock.On("GetFloat64OrElse", key, elseValue)}
}

func (_c *Manager_GetFloat64OrElse_Call) Run(run func(key string, elseValue float64)) *Manager_GetFloat64OrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *Manager_GetFloat64OrElse_Call) Return(_a0 float64) *Manager_GetFloat64OrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetFloat64OrElse_Call) RunAndReturn(run func(string, float64) float64) *Manager_GetFloat64OrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *Manager) GetInt(key string) int {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Manager_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type Manager_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetInt(key interface{}) *Manager_GetInt_Call {
	return &Manager_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *Manager_GetInt_Call) Run(run func(key string)) *Manager_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetInt_Call) Return(_a0 int) *Manager_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetInt_Call) RunAndReturn(run func(string) int) *Manager_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetIntOrElse(key string, elseValue int) int {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetIntOrElse")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(key, elseValue)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Manager_GetIntOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntOrElse'
type Manager_GetIntOrElse_Call struct {
	*mock.Call
}

// GetIntOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue int
func (_e *Manager_Expecter) GetIntOrElse(key interface{}, elseValue interface{}) *Manager_GetIntOrElse_Call {
	return &Manager_GetIntOrElse_Call{Call: _e.mock.On("GetIntOrElse", key, elseValue)}
}

func (_c *Manager_GetIntOrElse_Call) Run(run func(key string, elseValue int)) *Manager_GetIntOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Manager_GetIntOrElse_Call) Return(_a0 int) *Manager_GetIntOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetIntOrElse_Call) RunAndReturn(run func(string, int) int) *Manager_GetIntOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntSlice provides a mock function with given fields: key
func (_m *Manager) GetIntSlice(key string) []int {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetIntSlice")
	}

	var r0 []int
	if rf, ok := ret.Get(0).(func(string) []int); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// Manager_GetIntSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntSlice'
type Manager_GetIntSlice_Call struct {
	*mock.Call
}

// GetIntSlice is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetIntSlice(key interface{}) *Manager_GetIntSlice_Call {
	return &Manager_GetIntSlice_Call{Call: _e.mock.On("GetIntSlice", key)}
}

func (_c *Manager_GetIntSlice_Call) Run(run func(key string)) *Manager_GetIntSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetIntSlice_Call) Return(_a0 []int) *Manager_GetIntSlice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetIntSlice_Call) RunAndReturn(run func(string) []int) *Manager_GetIntSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntSliceOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetIntSliceOrElse(key string, elseValue []int) []int {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetIntSliceOrElse")
	}

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, []int) []int); ok {
		r0 = rf(key, elseValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// Manager_GetIntSliceOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntSliceOrElse'
type Manager_GetIntSliceOrElse_Call struct {
	*mock.Call
}

// GetIntSliceOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue []int
func (_e *Manager_Expecter) GetIntSliceOrElse(key interface{}, elseValue interface{}) *Manager_GetIntSliceOrElse_Call {
	return &Manager_GetIntSliceOrElse_Call{Call: _e.mock.On("GetIntSliceOrElse", key, elseValue)}
}

func (_c *Manager_GetIntSliceOrElse_Call) Run(run func(key string, elseValue []int)) *Manager_GetIntSliceOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]int))
	})
	return _c
}

func (_c *Manager_GetIntSliceOrElse_Call) Return(_a0 []int) *Manager_GetIntSliceOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetIntSliceOrElse_Call) RunAndReturn(run func(string, []int) []int) *Manager_GetIntSliceOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetMapArray provides a mock function with given fields: key
func (_m *Manager) GetMapArray(key string) []map[string]interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMapArray")
	}

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) []map[string]interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// Manager_GetMapArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMapArray'
type Manager_GetMapArray_Call struct {
	*mock.Call
}

// GetMapArray is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetMapArray(key interface{}) *Manager_GetMapArray_Call {
	return &Manager_GetMapArray_Call{Call: _e.mock.On("GetMapArray", key)}
}

func (_c *Manager_GetMapArray_Call) Run(run func(key string)) *Manager_GetMapArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetMapArray_Call) Return(_a0 []map[string]interface{}) *Manager_GetMapArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetMapArray_Call) RunAndReturn(run func(string) []map[string]interface{}) *Manager_GetMapArray_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *Manager) GetString(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Manager_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type Manager_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetString(key interface{}) *Manager_GetString_Call {
	return &Manager_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *Manager_GetString_Call) Run(run func(key string)) *Manager_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetString_Call) Return(_a0 string) *Manager_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetString_Call) RunAndReturn(run func(string) string) *Manager_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMap provides a mock function with given fields: key
func (_m *Manager) GetStringMap(key string) map[string]interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMap")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Manager_GetStringMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMap'
type Manager_GetStringMap_Call struct {
	*mock.Call
}

// GetStringMap is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetStringMap(key interface{}) *Manager_GetStringMap_Call {
	return &Manager_GetStringMap_Call{Call: _e.mock.On("GetStringMap", key)}
}

func (_c *Manager_GetStringMap_Call) Run(run func(key string)) *Manager_GetStringMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetStringMap_Call) Return(_a0 map[string]interface{}) *Manager_GetStringMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetStringMap_Call) RunAndReturn(run func(string) map[string]interface{}) *Manager_GetStringMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMapOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetStringMapOrElse(key string, elseValue map[string]interface{}) map[string]interface{} {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMapOrElse")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(key, elseValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Manager_GetStringMapOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapOrElse'
type Manager_GetStringMapOrElse_Call struct {
	*mock.Call
}

// GetStringMapOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue map[string]interface{}
func (_e *Manager_Expecter) GetStringMapOrElse(key interface{}, elseValue interface{}) *Manager_GetStringMapOrElse_Call {
	return &Manager_GetStringMapOrElse_Call{Call: _e.mock.On("GetStringMapOrElse", key, elseValue)}
}

func (_c *Manager_GetStringMapOrElse_Call) Run(run func(key string, elseValue map[string]interface{})) *Manager_GetStringMapOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Manager_GetStringMapOrElse_Call) Return(_a0 map[string]interface{}) *Manager_GetStringMapOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetStringMapOrElse_Call) RunAndReturn(run func(string, map[string]interface{}) map[string]interface{}) *Manager_GetStringMapOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMapString provides a mock function with given fields: key
func (_m *Manager) GetStringMapString(key string) map[string]string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMapString")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Manager_GetStringMapString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapString'
type Manager_GetStringMapString_Call struct {
	*mock.Call
}

// GetStringMapString is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetStringMapString(key interface{}) *Manager_GetStringMapString_Call {
	return &Manager_GetStringMapString_Call{Call: _e.mock.On("GetStringMapString", key)}
}

func (_c *Manager_GetStringMapString_Call) Run(run func(key string)) *Manager_GetStringMapString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetStringMapString_Call) Return(_a0 map[string]string) *Manager_GetStringMapString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetStringMapString_Call) RunAndReturn(run func(string) map[string]string) *Manager_GetStringMapString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMapStringOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetStringMapStringOrElse(key string, elseValue map[string]string) map[string]string {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMapStringOrElse")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, map[string]string) map[string]string); ok {
		r0 = rf(key, elseValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Manager_GetStringMapStringOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapStringOrElse'
type Manager_GetStringMapStringOrElse_Call struct {
	*mock.Call
}

// GetStringMapStringOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue map[string]string
func (_e *Manager_Expecter) GetStringMapStringOrElse(key interface{}, elseValue interface{}) *Manager_GetStringMapStringOrElse_Call {
	return &Manager_GetStringMapStringOrElse_Call{Call: _e.mock.On("GetStringMapStringOrElse", key, elseValue)}
}

func (_c *Manager_GetStringMapStringOrElse_Call) Run(run func(key string, elseValue map[string]string)) *Manager_GetStringMapStringOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *Manager_GetStringMapStringOrElse_Call) Return(_a0 map[string]string) *Manager_GetStringMapStringOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetStringMapStringOrElse_Call) RunAndReturn(run func(string, map[string]string) map[string]string) *Manager_GetStringMapStringOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringOrElse provides a mock function with given fields: key, elseValue
func (_m *Manager) GetStringOrElse(key string, elseValue string) string {
	ret := _m.Called(key, elseValue)

	if len(ret) == 0 {
		panic("no return value specified for GetStringOrElse")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, elseValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Manager_GetStringOrElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringOrElse'
type Manager_GetStringOrElse_Call struct {
	*mock.Call
}

// GetStringOrElse is a helper method to define mock.On call
//   - key string
//   - elseValue string
func (_e *Manager_Expecter) GetStringOrElse(key interface{}, elseValue interface{}) *Manager_GetStringOrElse_Call {
	return &Manager_GetStringOrElse_Call{Call: _e.mock.On("GetStringOrElse", key, elseValue)}
}

func (_c *Manager_GetStringOrElse_Call) Run(run func(key string, elseValue string)) *Manager_GetStringOrElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Manager_GetStringOrElse_Call) Return(_a0 string) *Manager_GetStringOrElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetStringOrElse_Call) RunAndReturn(run func(string, string) string) *Manager_GetStringOrElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringSlice provides a mock function with given fields: key
func (_m *Manager) GetStringSlice(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringSlice")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Manager_GetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringSlice'
type Manager_GetStringSlice_Call struct {
	*mock.Call
}

// GetStringSlice is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetStringSlice(key interface{}) *Manager_GetStringSlice_Call {
	return &Manager_GetStringSlice_Call{Call: _e.mock.On("GetStringSlice", key)}
}

func (_c *Manager_GetStringSlice_Call) Run(run func(key string)) *Manager_GetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetStringSlice_Call) Return(_a0 []string) *Manager_GetStringSlice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetStringSlice_Call) RunAndReturn(run func(string) []string) *Manager_GetStringSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetTime provides a mock function with given fields: key
func (_m *Manager) GetTime(key string) time.Time {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Manager_GetTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTime'
type Manager_GetTime_Call struct {
	*mock.Call
}

// GetTime is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetTime(key interface{}) *Manager_GetTime_Call {
	return &Manager_GetTime_Call{Call: _e.mock.On("GetTime", key)}
}

func (_c *Manager_GetTime_Call) Run(run func(key string)) *Manager_GetTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetTime_Call) Return(_a0 time.Time) *Manager_GetTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetTime_Call) RunAndReturn(run func(string) time.Time) *Manager_GetTime_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *Manager) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Manager_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Manager_Expecter) Init() *Manager_Init_Call {
	return &Manager_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Manager_Init_Call) Run(run func()) *Manager_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Init_Call) Return(_a0 error) *Manager_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Init_Call) RunAndReturn(run func() error) *Manager_Init_Call {
	_c.Call.Return(run)
	return _c
}

// IsSet provides a mock function with given fields: key
func (_m *Manager) IsSet(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for IsSet")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Manager_IsSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSet'
type Manager_IsSet_Call struct {
	*mock.Call
}

// IsSet is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) IsSet(key interface{}) *Manager_IsSet_Call {
	return &Manager_IsSet_Call{Call: _e.mock.On("IsSet", key)}
}

func (_c *Manager_IsSet_Call) Run(run func(key string)) *Manager_IsSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_IsSet_Call) Return(_a0 bool) *Manager_IsSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_IsSet_Call) RunAndReturn(run func(string) bool) *Manager_IsSet_Call {
	_c.Call.Return(run)
	return _c
}

// MustInit provides a mock function with given fields:
func (_m *Manager) MustInit() config.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MustInit")
	}

	var r0 config.Manager
	if rf, ok := ret.Get(0).(func() config.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Manager)
		}
	}

	return r0
}

// Manager_MustInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustInit'
type Manager_MustInit_Call struct {
	*mock.Call
}

// MustInit is a helper method to define mock.On call
func (_e *Manager_Expecter) MustInit() *Manager_MustInit_Call {
	return &Manager_MustInit_Call{Call: _e.mock.On("MustInit")}
}

func (_c *Manager_MustInit_Call) Run(run func()) *Manager_MustInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_MustInit_Call) Return(_a0 config.Manager) *Manager_MustInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustInit_Call) RunAndReturn(run func() config.Manager) *Manager_MustInit_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalTo provides a mock function with given fields: key, to
func (_m *Manager) UnmarshalTo(key string, to interface{}) error {
	ret := _m.Called(key, to)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_UnmarshalTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalTo'
type Manager_UnmarshalTo_Call struct {
	*mock.Call
}

// UnmarshalTo is a helper method to define mock.On call
//   - key string
//   - to interface{}
func (_e *Manager_Expecter) UnmarshalTo(key interface{}, to interface{}) *Manager_UnmarshalTo_Call {
	return &Manager_UnmarshalTo_Call{Call: _e.mock.On("UnmarshalTo", key, to)}
}

func (_c *Manager_UnmarshalTo_Call) Run(run func(key string, to interface{})) *Manager_UnmarshalTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Manager_UnmarshalTo_Call) Return(_a0 error) *Manager_UnmarshalTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_UnmarshalTo_Call) RunAndReturn(run func(string, interface{}) error) *Manager_UnmarshalTo_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
