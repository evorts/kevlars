// Code generated by mockery v2.38.0. DO NOT EDIT.

package audit

import (
	context "context"

	audit "github.com/evorts/kevlars/audit"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, record
func (_m *Manager) Add(ctx context.Context, record audit.Record) error {
	ret := _m.Called(ctx, record)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, audit.Record) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Manager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - record audit.Record
func (_e *Manager_Expecter) Add(ctx interface{}, record interface{}) *Manager_Add_Call {
	return &Manager_Add_Call{Call: _e.mock.On("Add", ctx, record)}
}

func (_c *Manager_Add_Call) Run(run func(ctx context.Context, record audit.Record)) *Manager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(audit.Record))
	})
	return _c
}

func (_c *Manager_Add_Call) Return(_a0 error) *Manager_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Add_Call) RunAndReturn(run func(context.Context, audit.Record) error) *Manager_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddMultiple provides a mock function with given fields: ctx, records
func (_m *Manager) AddMultiple(ctx context.Context, records []audit.Record) error {
	ret := _m.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for AddMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []audit.Record) error); ok {
		r0 = rf(ctx, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_AddMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMultiple'
type Manager_AddMultiple_Call struct {
	*mock.Call
}

// AddMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - records []audit.Record
func (_e *Manager_Expecter) AddMultiple(ctx interface{}, records interface{}) *Manager_AddMultiple_Call {
	return &Manager_AddMultiple_Call{Call: _e.mock.On("AddMultiple", ctx, records)}
}

func (_c *Manager_AddMultiple_Call) Run(run func(ctx context.Context, records []audit.Record)) *Manager_AddMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]audit.Record))
	})
	return _c
}

func (_c *Manager_AddMultiple_Call) Return(_a0 error) *Manager_AddMultiple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_AddMultiple_Call) RunAndReturn(run func(context.Context, []audit.Record) error) *Manager_AddMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *Manager) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Manager_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Manager_Expecter) Init() *Manager_Init_Call {
	return &Manager_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Manager_Init_Call) Run(run func()) *Manager_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Init_Call) Return(_a0 error) *Manager_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Init_Call) RunAndReturn(run func() error) *Manager_Init_Call {
	_c.Call.Return(run)
	return _c
}

// MustInit provides a mock function with given fields:
func (_m *Manager) MustInit() audit.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MustInit")
	}

	var r0 audit.Manager
	if rf, ok := ret.Get(0).(func() audit.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(audit.Manager)
		}
	}

	return r0
}

// Manager_MustInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustInit'
type Manager_MustInit_Call struct {
	*mock.Call
}

// MustInit is a helper method to define mock.On call
func (_e *Manager_Expecter) MustInit() *Manager_MustInit_Call {
	return &Manager_MustInit_Call{Call: _e.mock.On("MustInit")}
}

func (_c *Manager_MustInit_Call) Run(run func()) *Manager_MustInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_MustInit_Call) Return(_a0 audit.Manager) *Manager_MustInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustInit_Call) RunAndReturn(run func() audit.Manager) *Manager_MustInit_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
