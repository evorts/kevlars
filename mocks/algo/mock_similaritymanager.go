// Code generated by mockery v2.38.0. DO NOT EDIT.

package algo

import mock "github.com/stretchr/testify/mock"

// SimilarityManager is an autogenerated mock type for the SimilarityManager type
type SimilarityManager struct {
	mock.Mock
}

type SimilarityManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SimilarityManager) EXPECT() *SimilarityManager_Expecter {
	return &SimilarityManager_Expecter{mock: &_m.Mock}
}

// JaroWinkler provides a mock function with given fields: value, ref
func (_m *SimilarityManager) JaroWinkler(value string, ref string) float64 {
	ret := _m.Called(value, ref)

	if len(ret) == 0 {
		panic("no return value specified for JaroWinkler")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(value, ref)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// SimilarityManager_JaroWinkler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JaroWinkler'
type SimilarityManager_JaroWinkler_Call struct {
	*mock.Call
}

// JaroWinkler is a helper method to define mock.On call
//   - value string
//   - ref string
func (_e *SimilarityManager_Expecter) JaroWinkler(value interface{}, ref interface{}) *SimilarityManager_JaroWinkler_Call {
	return &SimilarityManager_JaroWinkler_Call{Call: _e.mock.On("JaroWinkler", value, ref)}
}

func (_c *SimilarityManager_JaroWinkler_Call) Run(run func(value string, ref string)) *SimilarityManager_JaroWinkler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SimilarityManager_JaroWinkler_Call) Return(score float64) *SimilarityManager_JaroWinkler_Call {
	_c.Call.Return(score)
	return _c
}

func (_c *SimilarityManager_JaroWinkler_Call) RunAndReturn(run func(string, string) float64) *SimilarityManager_JaroWinkler_Call {
	_c.Call.Return(run)
	return _c
}

// Levenshtein provides a mock function with given fields: value, ref
func (_m *SimilarityManager) Levenshtein(value string, ref string) float64 {
	ret := _m.Called(value, ref)

	if len(ret) == 0 {
		panic("no return value specified for Levenshtein")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(value, ref)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// SimilarityManager_Levenshtein_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Levenshtein'
type SimilarityManager_Levenshtein_Call struct {
	*mock.Call
}

// Levenshtein is a helper method to define mock.On call
//   - value string
//   - ref string
func (_e *SimilarityManager_Expecter) Levenshtein(value interface{}, ref interface{}) *SimilarityManager_Levenshtein_Call {
	return &SimilarityManager_Levenshtein_Call{Call: _e.mock.On("Levenshtein", value, ref)}
}

func (_c *SimilarityManager_Levenshtein_Call) Run(run func(value string, ref string)) *SimilarityManager_Levenshtein_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SimilarityManager_Levenshtein_Call) Return(score float64) *SimilarityManager_Levenshtein_Call {
	_c.Call.Return(score)
	return _c
}

func (_c *SimilarityManager_Levenshtein_Call) RunAndReturn(run func(string, string) float64) *SimilarityManager_Levenshtein_Call {
	_c.Call.Return(run)
	return _c
}

// SimpleDate provides a mock function with given fields: value, ref
func (_m *SimilarityManager) SimpleDate(value string, ref string) float64 {
	ret := _m.Called(value, ref)

	if len(ret) == 0 {
		panic("no return value specified for SimpleDate")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(value, ref)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// SimilarityManager_SimpleDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimpleDate'
type SimilarityManager_SimpleDate_Call struct {
	*mock.Call
}

// SimpleDate is a helper method to define mock.On call
//   - value string
//   - ref string
func (_e *SimilarityManager_Expecter) SimpleDate(value interface{}, ref interface{}) *SimilarityManager_SimpleDate_Call {
	return &SimilarityManager_SimpleDate_Call{Call: _e.mock.On("SimpleDate", value, ref)}
}

func (_c *SimilarityManager_SimpleDate_Call) Run(run func(value string, ref string)) *SimilarityManager_SimpleDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SimilarityManager_SimpleDate_Call) Return(score float64) *SimilarityManager_SimpleDate_Call {
	_c.Call.Return(score)
	return _c
}

func (_c *SimilarityManager_SimpleDate_Call) RunAndReturn(run func(string, string) float64) *SimilarityManager_SimpleDate_Call {
	_c.Call.Return(run)
	return _c
}

// Weight provides a mock function with given fields: key
func (_m *SimilarityManager) Weight(key string) float64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Weight")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// SimilarityManager_Weight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Weight'
type SimilarityManager_Weight_Call struct {
	*mock.Call
}

// Weight is a helper method to define mock.On call
//   - key string
func (_e *SimilarityManager_Expecter) Weight(key interface{}) *SimilarityManager_Weight_Call {
	return &SimilarityManager_Weight_Call{Call: _e.mock.On("Weight", key)}
}

func (_c *SimilarityManager_Weight_Call) Run(run func(key string)) *SimilarityManager_Weight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SimilarityManager_Weight_Call) Return(_a0 float64) *SimilarityManager_Weight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SimilarityManager_Weight_Call) RunAndReturn(run func(string) float64) *SimilarityManager_Weight_Call {
	_c.Call.Return(run)
	return _c
}

// NewSimilarityManager creates a new instance of SimilarityManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSimilarityManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SimilarityManager {
	mock := &SimilarityManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
