// Code generated by mockery v2.43.0. DO NOT EDIT.

package scheduler

import (
	scheduler "github.com/evorts/kevlars/scheduler"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields:
func (_m *Manager) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Manager_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Manager_Expecter) Init() *Manager_Init_Call {
	return &Manager_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Manager_Init_Call) Run(run func()) *Manager_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Init_Call) Return(_a0 error) *Manager_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Init_Call) RunAndReturn(run func() error) *Manager_Init_Call {
	_c.Call.Return(run)
	return _c
}

// MustInit provides a mock function with given fields:
func (_m *Manager) MustInit() scheduler.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MustInit")
	}

	var r0 scheduler.Manager
	if rf, ok := ret.Get(0).(func() scheduler.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheduler.Manager)
		}
	}

	return r0
}

// Manager_MustInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustInit'
type Manager_MustInit_Call struct {
	*mock.Call
}

// MustInit is a helper method to define mock.On call
func (_e *Manager_Expecter) MustInit() *Manager_MustInit_Call {
	return &Manager_MustInit_Call{Call: _e.mock.On("MustInit")}
}

func (_c *Manager_MustInit_Call) Run(run func()) *Manager_MustInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_MustInit_Call) Return(_a0 scheduler.Manager) *Manager_MustInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustInit_Call) RunAndReturn(run func() scheduler.Manager) *Manager_MustInit_Call {
	_c.Call.Return(run)
	return _c
}

// StartAsync provides a mock function with given fields:
func (_m *Manager) StartAsync() {
	_m.Called()
}

// Manager_StartAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAsync'
type Manager_StartAsync_Call struct {
	*mock.Call
}

// StartAsync is a helper method to define mock.On call
func (_e *Manager_Expecter) StartAsync() *Manager_StartAsync_Call {
	return &Manager_StartAsync_Call{Call: _e.mock.On("StartAsync")}
}

func (_c *Manager_StartAsync_Call) Run(run func()) *Manager_StartAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_StartAsync_Call) Return() *Manager_StartAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_StartAsync_Call) RunAndReturn(run func()) *Manager_StartAsync_Call {
	_c.Call.Return(run)
	return _c
}

// StartBlocking provides a mock function with given fields:
func (_m *Manager) StartBlocking() {
	_m.Called()
}

// Manager_StartBlocking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBlocking'
type Manager_StartBlocking_Call struct {
	*mock.Call
}

// StartBlocking is a helper method to define mock.On call
func (_e *Manager_Expecter) StartBlocking() *Manager_StartBlocking_Call {
	return &Manager_StartBlocking_Call{Call: _e.mock.On("StartBlocking")}
}

func (_c *Manager_StartBlocking_Call) Run(run func()) *Manager_StartBlocking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_StartBlocking_Call) Return() *Manager_StartBlocking_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_StartBlocking_Call) RunAndReturn(run func()) *Manager_StartBlocking_Call {
	_c.Call.Return(run)
	return _c
}

// WithSupportSeconds provides a mock function with given fields:
func (_m *Manager) WithSupportSeconds() scheduler.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithSupportSeconds")
	}

	var r0 scheduler.Manager
	if rf, ok := ret.Get(0).(func() scheduler.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheduler.Manager)
		}
	}

	return r0
}

// Manager_WithSupportSeconds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithSupportSeconds'
type Manager_WithSupportSeconds_Call struct {
	*mock.Call
}

// WithSupportSeconds is a helper method to define mock.On call
func (_e *Manager_Expecter) WithSupportSeconds() *Manager_WithSupportSeconds_Call {
	return &Manager_WithSupportSeconds_Call{Call: _e.mock.On("WithSupportSeconds")}
}

func (_c *Manager_WithSupportSeconds_Call) Run(run func()) *Manager_WithSupportSeconds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_WithSupportSeconds_Call) Return(_a0 scheduler.Manager) *Manager_WithSupportSeconds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_WithSupportSeconds_Call) RunAndReturn(run func() scheduler.Manager) *Manager_WithSupportSeconds_Call {
	_c.Call.Return(run)
	return _c
}

// WithTasks provides a mock function with given fields: tasks
func (_m *Manager) WithTasks(tasks ...func()) scheduler.Manager {
	_va := make([]interface{}, len(tasks))
	for _i := range tasks {
		_va[_i] = tasks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithTasks")
	}

	var r0 scheduler.Manager
	if rf, ok := ret.Get(0).(func(...func()) scheduler.Manager); ok {
		r0 = rf(tasks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheduler.Manager)
		}
	}

	return r0
}

// Manager_WithTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTasks'
type Manager_WithTasks_Call struct {
	*mock.Call
}

// WithTasks is a helper method to define mock.On call
//   - tasks ...func()
func (_e *Manager_Expecter) WithTasks(tasks ...interface{}) *Manager_WithTasks_Call {
	return &Manager_WithTasks_Call{Call: _e.mock.On("WithTasks",
		append([]interface{}{}, tasks...)...)}
}

func (_c *Manager_WithTasks_Call) Run(run func(tasks ...func())) *Manager_WithTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(), len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(func())
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Manager_WithTasks_Call) Return(_a0 scheduler.Manager) *Manager_WithTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_WithTasks_Call) RunAndReturn(run func(...func()) scheduler.Manager) *Manager_WithTasks_Call {
	_c.Call.Return(run)
	return _c
}

// WithTimeZone provides a mock function with given fields: zone
func (_m *Manager) WithTimeZone(zone *time.Location) scheduler.Manager {
	ret := _m.Called(zone)

	if len(ret) == 0 {
		panic("no return value specified for WithTimeZone")
	}

	var r0 scheduler.Manager
	if rf, ok := ret.Get(0).(func(*time.Location) scheduler.Manager); ok {
		r0 = rf(zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheduler.Manager)
		}
	}

	return r0
}

// Manager_WithTimeZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTimeZone'
type Manager_WithTimeZone_Call struct {
	*mock.Call
}

// WithTimeZone is a helper method to define mock.On call
//   - zone *time.Location
func (_e *Manager_Expecter) WithTimeZone(zone interface{}) *Manager_WithTimeZone_Call {
	return &Manager_WithTimeZone_Call{Call: _e.mock.On("WithTimeZone", zone)}
}

func (_c *Manager_WithTimeZone_Call) Run(run func(zone *time.Location)) *Manager_WithTimeZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Location))
	})
	return _c
}

func (_c *Manager_WithTimeZone_Call) Return(_a0 scheduler.Manager) *Manager_WithTimeZone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_WithTimeZone_Call) RunAndReturn(run func(*time.Location) scheduler.Manager) *Manager_WithTimeZone_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
