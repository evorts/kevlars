// Code generated by mockery v2.43.0. DO NOT EDIT.

package ctime

import (
	ctime "github.com/evorts/kevlars/ctime"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *Manager) Get() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Manager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Manager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *Manager_Expecter) Get() *Manager_Get_Call {
	return &Manager_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *Manager_Get_Call) Run(run func()) *Manager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Get_Call) Return(_a0 time.Time) *Manager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Get_Call) RunAndReturn(run func() time.Time) *Manager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocation provides a mock function with given fields:
func (_m *Manager) GetLocation() *time.Location {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 *time.Location
	if rf, ok := ret.Get(0).(func() *time.Location); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Location)
		}
	}

	return r0
}

// Manager_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type Manager_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
func (_e *Manager_Expecter) GetLocation() *Manager_GetLocation_Call {
	return &Manager_GetLocation_Call{Call: _e.mock.On("GetLocation")}
}

func (_c *Manager_GetLocation_Call) Run(run func()) *Manager_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_GetLocation_Call) Return(_a0 *time.Location) *Manager_GetLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetLocation_Call) RunAndReturn(run func() *time.Location) *Manager_GetLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetPtr provides a mock function with given fields:
func (_m *Manager) GetPtr() *time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPtr")
	}

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// Manager_GetPtr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPtr'
type Manager_GetPtr_Call struct {
	*mock.Call
}

// GetPtr is a helper method to define mock.On call
func (_e *Manager_Expecter) GetPtr() *Manager_GetPtr_Call {
	return &Manager_GetPtr_Call{Call: _e.mock.On("GetPtr")}
}

func (_c *Manager_GetPtr_Call) Run(run func()) *Manager_GetPtr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_GetPtr_Call) Return(_a0 *time.Time) *Manager_GetPtr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetPtr_Call) RunAndReturn(run func() *time.Time) *Manager_GetPtr_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with given fields:
func (_m *Manager) Now() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Manager_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type Manager_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *Manager_Expecter) Now() *Manager_Now_Call {
	return &Manager_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *Manager_Now_Call) Run(run func()) *Manager_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Now_Call) Return(_a0 time.Time) *Manager_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Now_Call) RunAndReturn(run func() time.Time) *Manager_Now_Call {
	_c.Call.Return(run)
	return _c
}

// NowPtr provides a mock function with given fields:
func (_m *Manager) NowPtr() *time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NowPtr")
	}

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// Manager_NowPtr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NowPtr'
type Manager_NowPtr_Call struct {
	*mock.Call
}

// NowPtr is a helper method to define mock.On call
func (_e *Manager_Expecter) NowPtr() *Manager_NowPtr_Call {
	return &Manager_NowPtr_Call{Call: _e.mock.On("NowPtr")}
}

func (_c *Manager_NowPtr_Call) Run(run func()) *Manager_NowPtr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_NowPtr_Call) Return(_a0 *time.Time) *Manager_NowPtr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_NowPtr_Call) RunAndReturn(run func() *time.Time) *Manager_NowPtr_Call {
	_c.Call.Return(run)
	return _c
}

// Renew provides a mock function with given fields:
func (_m *Manager) Renew() ctime.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Renew")
	}

	var r0 ctime.Manager
	if rf, ok := ret.Get(0).(func() ctime.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ctime.Manager)
		}
	}

	return r0
}

// Manager_Renew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Renew'
type Manager_Renew_Call struct {
	*mock.Call
}

// Renew is a helper method to define mock.On call
func (_e *Manager_Expecter) Renew() *Manager_Renew_Call {
	return &Manager_Renew_Call{Call: _e.mock.On("Renew")}
}

func (_c *Manager_Renew_Call) Run(run func()) *Manager_Renew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Renew_Call) Return(_a0 ctime.Manager) *Manager_Renew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Renew_Call) RunAndReturn(run func() ctime.Manager) *Manager_Renew_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
