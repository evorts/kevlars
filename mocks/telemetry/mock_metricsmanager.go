// Code generated by mockery v2.42.3. DO NOT EDIT.

package telemetry

import (
	telemetry "github.com/evorts/kevlars/telemetry"
	mock "github.com/stretchr/testify/mock"
)

// MetricsManager is an autogenerated mock type for the MetricsManager type
type MetricsManager struct {
	mock.Mock
}

type MetricsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsManager) EXPECT() *MetricsManager_Expecter {
	return &MetricsManager_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: metricName, value, tags
func (_m *MetricsManager) Count(metricName string, value int64, tags []string) {
	_m.Called(metricName, value, tags)
}

// MetricsManager_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MetricsManager_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - metricName string
//   - value int64
//   - tags []string
func (_e *MetricsManager_Expecter) Count(metricName interface{}, value interface{}, tags interface{}) *MetricsManager_Count_Call {
	return &MetricsManager_Count_Call{Call: _e.mock.On("Count", metricName, value, tags)}
}

func (_c *MetricsManager_Count_Call) Run(run func(metricName string, value int64, tags []string)) *MetricsManager_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].([]string))
	})
	return _c
}

func (_c *MetricsManager_Count_Call) Return() *MetricsManager_Count_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsManager_Count_Call) RunAndReturn(run func(string, int64, []string)) *MetricsManager_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Distribution provides a mock function with given fields: metricName, value, tags
func (_m *MetricsManager) Distribution(metricName string, value float64, tags []string) {
	_m.Called(metricName, value, tags)
}

// MetricsManager_Distribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distribution'
type MetricsManager_Distribution_Call struct {
	*mock.Call
}

// Distribution is a helper method to define mock.On call
//   - metricName string
//   - value float64
//   - tags []string
func (_e *MetricsManager_Expecter) Distribution(metricName interface{}, value interface{}, tags interface{}) *MetricsManager_Distribution_Call {
	return &MetricsManager_Distribution_Call{Call: _e.mock.On("Distribution", metricName, value, tags)}
}

func (_c *MetricsManager_Distribution_Call) Run(run func(metricName string, value float64, tags []string)) *MetricsManager_Distribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string))
	})
	return _c
}

func (_c *MetricsManager_Distribution_Call) Return() *MetricsManager_Distribution_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsManager_Distribution_Call) RunAndReturn(run func(string, float64, []string)) *MetricsManager_Distribution_Call {
	_c.Call.Return(run)
	return _c
}

// Enabled provides a mock function with given fields:
func (_m *MetricsManager) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MetricsManager_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type MetricsManager_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *MetricsManager_Expecter) Enabled() *MetricsManager_Enabled_Call {
	return &MetricsManager_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *MetricsManager_Enabled_Call) Run(run func()) *MetricsManager_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsManager_Enabled_Call) Return(_a0 bool) *MetricsManager_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsManager_Enabled_Call) RunAndReturn(run func() bool) *MetricsManager_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// Gauge provides a mock function with given fields: metricName, value, tags
func (_m *MetricsManager) Gauge(metricName string, value float64, tags []string) {
	_m.Called(metricName, value, tags)
}

// MetricsManager_Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gauge'
type MetricsManager_Gauge_Call struct {
	*mock.Call
}

// Gauge is a helper method to define mock.On call
//   - metricName string
//   - value float64
//   - tags []string
func (_e *MetricsManager_Expecter) Gauge(metricName interface{}, value interface{}, tags interface{}) *MetricsManager_Gauge_Call {
	return &MetricsManager_Gauge_Call{Call: _e.mock.On("Gauge", metricName, value, tags)}
}

func (_c *MetricsManager_Gauge_Call) Run(run func(metricName string, value float64, tags []string)) *MetricsManager_Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string))
	})
	return _c
}

func (_c *MetricsManager_Gauge_Call) Return() *MetricsManager_Gauge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsManager_Gauge_Call) RunAndReturn(run func(string, float64, []string)) *MetricsManager_Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// Histogram provides a mock function with given fields: metricName, value, tags
func (_m *MetricsManager) Histogram(metricName string, value float64, tags []string) {
	_m.Called(metricName, value, tags)
}

// MetricsManager_Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Histogram'
type MetricsManager_Histogram_Call struct {
	*mock.Call
}

// Histogram is a helper method to define mock.On call
//   - metricName string
//   - value float64
//   - tags []string
func (_e *MetricsManager_Expecter) Histogram(metricName interface{}, value interface{}, tags interface{}) *MetricsManager_Histogram_Call {
	return &MetricsManager_Histogram_Call{Call: _e.mock.On("Histogram", metricName, value, tags)}
}

func (_c *MetricsManager_Histogram_Call) Run(run func(metricName string, value float64, tags []string)) *MetricsManager_Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string))
	})
	return _c
}

func (_c *MetricsManager_Histogram_Call) Return() *MetricsManager_Histogram_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsManager_Histogram_Call) RunAndReturn(run func(string, float64, []string)) *MetricsManager_Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// MustInit provides a mock function with given fields:
func (_m *MetricsManager) MustInit() telemetry.MetricsManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MustInit")
	}

	var r0 telemetry.MetricsManager
	if rf, ok := ret.Get(0).(func() telemetry.MetricsManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telemetry.MetricsManager)
		}
	}

	return r0
}

// MetricsManager_MustInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustInit'
type MetricsManager_MustInit_Call struct {
	*mock.Call
}

// MustInit is a helper method to define mock.On call
func (_e *MetricsManager_Expecter) MustInit() *MetricsManager_MustInit_Call {
	return &MetricsManager_MustInit_Call{Call: _e.mock.On("MustInit")}
}

func (_c *MetricsManager_MustInit_Call) Run(run func()) *MetricsManager_MustInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsManager_MustInit_Call) Return(_a0 telemetry.MetricsManager) *MetricsManager_MustInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsManager_MustInit_Call) RunAndReturn(run func() telemetry.MetricsManager) *MetricsManager_MustInit_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: name
func (_m *MetricsManager) Start(name string) telemetry.MetricPushAction {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 telemetry.MetricPushAction
	if rf, ok := ret.Get(0).(func(string) telemetry.MetricPushAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telemetry.MetricPushAction)
		}
	}

	return r0
}

// MetricsManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MetricsManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - name string
func (_e *MetricsManager_Expecter) Start(name interface{}) *MetricsManager_Start_Call {
	return &MetricsManager_Start_Call{Call: _e.mock.On("Start", name)}
}

func (_c *MetricsManager_Start_Call) Run(run func(name string)) *MetricsManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MetricsManager_Start_Call) Return(_a0 telemetry.MetricPushAction) *MetricsManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsManager_Start_Call) RunAndReturn(run func(string) telemetry.MetricPushAction) *MetricsManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartBy provides a mock function with given fields: provider, name
func (_m *MetricsManager) StartBy(provider string, name string) telemetry.MetricPushAction {
	ret := _m.Called(provider, name)

	if len(ret) == 0 {
		panic("no return value specified for StartBy")
	}

	var r0 telemetry.MetricPushAction
	if rf, ok := ret.Get(0).(func(string, string) telemetry.MetricPushAction); ok {
		r0 = rf(provider, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telemetry.MetricPushAction)
		}
	}

	return r0
}

// MetricsManager_StartBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBy'
type MetricsManager_StartBy_Call struct {
	*mock.Call
}

// StartBy is a helper method to define mock.On call
//   - provider string
//   - name string
func (_e *MetricsManager_Expecter) StartBy(provider interface{}, name interface{}) *MetricsManager_StartBy_Call {
	return &MetricsManager_StartBy_Call{Call: _e.mock.On("StartBy", provider, name)}
}

func (_c *MetricsManager_StartBy_Call) Run(run func(provider string, name string)) *MetricsManager_StartBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MetricsManager_StartBy_Call) Return(_a0 telemetry.MetricPushAction) *MetricsManager_StartBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsManager_StartBy_Call) RunAndReturn(run func(string, string) telemetry.MetricPushAction) *MetricsManager_StartBy_Call {
	_c.Call.Return(run)
	return _c
}

// StartDefault provides a mock function with given fields: name
func (_m *MetricsManager) StartDefault(name string) telemetry.MetricPushAction {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for StartDefault")
	}

	var r0 telemetry.MetricPushAction
	if rf, ok := ret.Get(0).(func(string) telemetry.MetricPushAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telemetry.MetricPushAction)
		}
	}

	return r0
}

// MetricsManager_StartDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDefault'
type MetricsManager_StartDefault_Call struct {
	*mock.Call
}

// StartDefault is a helper method to define mock.On call
//   - name string
func (_e *MetricsManager_Expecter) StartDefault(name interface{}) *MetricsManager_StartDefault_Call {
	return &MetricsManager_StartDefault_Call{Call: _e.mock.On("StartDefault", name)}
}

func (_c *MetricsManager_StartDefault_Call) Run(run func(name string)) *MetricsManager_StartDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MetricsManager_StartDefault_Call) Return(_a0 telemetry.MetricPushAction) *MetricsManager_StartDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsManager_StartDefault_Call) RunAndReturn(run func(string) telemetry.MetricPushAction) *MetricsManager_StartDefault_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricsManager creates a new instance of MetricsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsManager {
	mock := &MetricsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
