// Code generated by mockery v2.43.0. DO NOT EDIT.

package telemetry

import (
	context "context"

	telemetry "github.com/evorts/kevlars/telemetry"
	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/trace"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function with given fields:
func (_m *Manager) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Manager_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type Manager_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *Manager_Expecter) Enabled() *Manager_Enabled_Call {
	return &Manager_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *Manager_Enabled_Call) Run(run func()) *Manager_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Enabled_Call) Return(_a0 bool) *Manager_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Enabled_Call) RunAndReturn(run func() bool) *Manager_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *Manager) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_ForceFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceFlush'
type Manager_ForceFlush_Call struct {
	*mock.Call
}

// ForceFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Manager_Expecter) ForceFlush(ctx interface{}) *Manager_ForceFlush_Call {
	return &Manager_ForceFlush_Call{Call: _e.mock.On("ForceFlush", ctx)}
}

func (_c *Manager_ForceFlush_Call) Run(run func(ctx context.Context)) *Manager_ForceFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Manager_ForceFlush_Call) Return(_a0 error) *Manager_ForceFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_ForceFlush_Call) RunAndReturn(run func(context.Context) error) *Manager_ForceFlush_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *Manager) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Manager_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Manager_Expecter) Init() *Manager_Init_Call {
	return &Manager_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Manager_Init_Call) Run(run func()) *Manager_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Init_Call) Return(_a0 error) *Manager_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Init_Call) RunAndReturn(run func() error) *Manager_Init_Call {
	_c.Call.Return(run)
	return _c
}

// MustInit provides a mock function with given fields:
func (_m *Manager) MustInit() telemetry.Manager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MustInit")
	}

	var r0 telemetry.Manager
	if rf, ok := ret.Get(0).(func() telemetry.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telemetry.Manager)
		}
	}

	return r0
}

// Manager_MustInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustInit'
type Manager_MustInit_Call struct {
	*mock.Call
}

// MustInit is a helper method to define mock.On call
func (_e *Manager_Expecter) MustInit() *Manager_MustInit_Call {
	return &Manager_MustInit_Call{Call: _e.mock.On("MustInit")}
}

func (_c *Manager_MustInit_Call) Run(run func()) *Manager_MustInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_MustInit_Call) Return(_a0 telemetry.Manager) *Manager_MustInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustInit_Call) RunAndReturn(run func() telemetry.Manager) *Manager_MustInit_Call {
	_c.Call.Return(run)
	return _c
}

// NewTracer provides a mock function with given fields: name, opts
func (_m *Manager) NewTracer(name string, opts ...trace.TracerOption) trace.Tracer {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewTracer")
	}

	var r0 trace.Tracer
	if rf, ok := ret.Get(0).(func(string, ...trace.TracerOption) trace.Tracer); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}

	return r0
}

// Manager_NewTracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTracer'
type Manager_NewTracer_Call struct {
	*mock.Call
}

// NewTracer is a helper method to define mock.On call
//   - name string
//   - opts ...trace.TracerOption
func (_e *Manager_Expecter) NewTracer(name interface{}, opts ...interface{}) *Manager_NewTracer_Call {
	return &Manager_NewTracer_Call{Call: _e.mock.On("NewTracer",
		append([]interface{}{name}, opts...)...)}
}

func (_c *Manager_NewTracer_Call) Run(run func(name string, opts ...trace.TracerOption)) *Manager_NewTracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.TracerOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.TracerOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Manager_NewTracer_Call) Return(_a0 trace.Tracer) *Manager_NewTracer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_NewTracer_Call) RunAndReturn(run func(string, ...trace.TracerOption) trace.Tracer) *Manager_NewTracer_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *Manager) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Manager_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Manager_Expecter) Shutdown(ctx interface{}) *Manager_Shutdown_Call {
	return &Manager_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *Manager_Shutdown_Call) Run(run func(ctx context.Context)) *Manager_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Manager_Shutdown_Call) Return(_a0 error) *Manager_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Shutdown_Call) RunAndReturn(run func(context.Context) error) *Manager_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Tracer provides a mock function with given fields:
func (_m *Manager) Tracer() trace.Tracer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tracer")
	}

	var r0 trace.Tracer
	if rf, ok := ret.Get(0).(func() trace.Tracer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}

	return r0
}

// Manager_Tracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tracer'
type Manager_Tracer_Call struct {
	*mock.Call
}

// Tracer is a helper method to define mock.On call
func (_e *Manager_Expecter) Tracer() *Manager_Tracer_Call {
	return &Manager_Tracer_Call{Call: _e.mock.On("Tracer")}
}

func (_c *Manager_Tracer_Call) Run(run func()) *Manager_Tracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Tracer_Call) Return(_a0 trace.Tracer) *Manager_Tracer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Tracer_Call) RunAndReturn(run func() trace.Tracer) *Manager_Tracer_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
