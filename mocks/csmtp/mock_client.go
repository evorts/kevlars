// Code generated by mockery v2.43.0. DO NOT EDIT.

package csmtp

import (
	common "github.com/evorts/kevlars/common"
	csmtp "github.com/evorts/kevlars/csmtp"

	io "io"

	mock "github.com/stretchr/testify/mock"

	smtp "net/smtp"

	time "time"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// AddOptions provides a mock function with given fields: opts
func (_m *Client) AddOptions(opts ...common.Option[csmtp.client]) csmtp.Client {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddOptions")
	}

	var r0 csmtp.Client
	if rf, ok := ret.Get(0).(func(...common.Option[csmtp.client]) csmtp.Client); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(csmtp.Client)
		}
	}

	return r0
}

// Client_AddOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOptions'
type Client_AddOptions_Call struct {
	*mock.Call
}

// AddOptions is a helper method to define mock.On call
//   - opts ...common.Option[csmtp.client]
func (_e *Client_Expecter) AddOptions(opts ...interface{}) *Client_AddOptions_Call {
	return &Client_AddOptions_Call{Call: _e.mock.On("AddOptions",
		append([]interface{}{}, opts...)...)}
}

func (_c *Client_AddOptions_Call) Run(run func(opts ...common.Option[csmtp.client])) *Client_AddOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]common.Option[csmtp.client], len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(common.Option[csmtp.client])
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Client_AddOptions_Call) Return(_a0 csmtp.Client) *Client_AddOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_AddOptions_Call) RunAndReturn(run func(...common.Option[csmtp.client]) csmtp.Client) *Client_AddOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Auth provides a mock function with given fields: a
func (_m *Client) Auth(a smtp.Auth) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(smtp.Auth) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type Client_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - a smtp.Auth
func (_e *Client_Expecter) Auth(a interface{}) *Client_Auth_Call {
	return &Client_Auth_Call{Call: _e.mock.On("Auth", a)}
}

func (_c *Client_Auth_Call) Run(run func(a smtp.Auth)) *Client_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(smtp.Auth))
	})
	return _c
}

func (_c *Client_Auth_Call) Return(_a0 error) *Client_Auth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Auth_Call) RunAndReturn(run func(smtp.Auth) error) *Client_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with given fields:
func (_m *Client) Data() (io.WriteCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.WriteCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.WriteCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Client_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *Client_Expecter) Data() *Client_Data_Call {
	return &Client_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *Client_Data_Call) Run(run func()) *Client_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Data_Call) Return(_a0 io.WriteCloser, _a1 error) *Client_Data_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Data_Call) RunAndReturn(run func() (io.WriteCloser, error)) *Client_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Ext provides a mock function with given fields:
func (_m *Client) Ext() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ext")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Client_Ext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ext'
type Client_Ext_Call struct {
	*mock.Call
}

// Ext is a helper method to define mock.On call
func (_e *Client_Expecter) Ext() *Client_Ext_Call {
	return &Client_Ext_Call{Call: _e.mock.On("Ext")}
}

func (_c *Client_Ext_Call) Run(run func()) *Client_Ext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Ext_Call) Return(_a0 map[string]string) *Client_Ext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Ext_Call) RunAndReturn(run func() map[string]string) *Client_Ext_Call {
	_c.Call.Return(run)
	return _c
}

// Extension provides a mock function with given fields: ext
func (_m *Client) Extension(ext string) (bool, string) {
	ret := _m.Called(ext)

	if len(ret) == 0 {
		panic("no return value specified for Extension")
	}

	var r0 bool
	var r1 string
	if rf, ok := ret.Get(0).(func(string) (bool, string)); ok {
		return rf(ext)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ext)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(ext)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// Client_Extension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extension'
type Client_Extension_Call struct {
	*mock.Call
}

// Extension is a helper method to define mock.On call
//   - ext string
func (_e *Client_Expecter) Extension(ext interface{}) *Client_Extension_Call {
	return &Client_Extension_Call{Call: _e.mock.On("Extension", ext)}
}

func (_c *Client_Extension_Call) Run(run func(ext string)) *Client_Extension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_Extension_Call) Return(_a0 bool, _a1 string) *Client_Extension_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Extension_Call) RunAndReturn(run func(string) (bool, string)) *Client_Extension_Call {
	_c.Call.Return(run)
	return _c
}

// Mail provides a mock function with given fields: from
func (_m *Client) Mail(from string) error {
	ret := _m.Called(from)

	if len(ret) == 0 {
		panic("no return value specified for Mail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(from)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Mail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mail'
type Client_Mail_Call struct {
	*mock.Call
}

// Mail is a helper method to define mock.On call
//   - from string
func (_e *Client_Expecter) Mail(from interface{}) *Client_Mail_Call {
	return &Client_Mail_Call{Call: _e.mock.On("Mail", from)}
}

func (_c *Client_Mail_Call) Run(run func(from string)) *Client_Mail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_Mail_Call) Return(_a0 error) *Client_Mail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Mail_Call) RunAndReturn(run func(string) error) *Client_Mail_Call {
	_c.Call.Return(run)
	return _c
}

// Noop provides a mock function with given fields:
func (_m *Client) Noop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Noop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Noop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Noop'
type Client_Noop_Call struct {
	*mock.Call
}

// Noop is a helper method to define mock.On call
func (_e *Client_Expecter) Noop() *Client_Noop_Call {
	return &Client_Noop_Call{Call: _e.mock.On("Noop")}
}

func (_c *Client_Noop_Call) Run(run func()) *Client_Noop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Noop_Call) Return(_a0 error) *Client_Noop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Noop_Call) RunAndReturn(run func() error) *Client_Noop_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: timeout
func (_m *Client) Ping(timeout *time.Duration) error {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*time.Duration) error); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Client_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - timeout *time.Duration
func (_e *Client_Expecter) Ping(timeout interface{}) *Client_Ping_Call {
	return &Client_Ping_Call{Call: _e.mock.On("Ping", timeout)}
}

func (_c *Client_Ping_Call) Run(run func(timeout *time.Duration)) *Client_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Duration))
	})
	return _c
}

func (_c *Client_Ping_Call) Return(_a0 error) *Client_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Ping_Call) RunAndReturn(run func(*time.Duration) error) *Client_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Quit provides a mock function with given fields:
func (_m *Client) Quit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Quit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Quit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quit'
type Client_Quit_Call struct {
	*mock.Call
}

// Quit is a helper method to define mock.On call
func (_e *Client_Expecter) Quit() *Client_Quit_Call {
	return &Client_Quit_Call{Call: _e.mock.On("Quit")}
}

func (_c *Client_Quit_Call) Run(run func()) *Client_Quit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Quit_Call) Return(_a0 error) *Client_Quit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Quit_Call) RunAndReturn(run func() error) *Client_Quit_Call {
	_c.Call.Return(run)
	return _c
}

// Rcpt provides a mock function with given fields: to
func (_m *Client) Rcpt(to string) error {
	ret := _m.Called(to)

	if len(ret) == 0 {
		panic("no return value specified for Rcpt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Rcpt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rcpt'
type Client_Rcpt_Call struct {
	*mock.Call
}

// Rcpt is a helper method to define mock.On call
//   - to string
func (_e *Client_Expecter) Rcpt(to interface{}) *Client_Rcpt_Call {
	return &Client_Rcpt_Call{Call: _e.mock.On("Rcpt", to)}
}

func (_c *Client_Rcpt_Call) Run(run func(to string)) *Client_Rcpt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_Rcpt_Call) Return(_a0 error) *Client_Rcpt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Rcpt_Call) RunAndReturn(run func(string) error) *Client_Rcpt_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *Client) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type Client_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *Client_Expecter) Reset() *Client_Reset_Call {
	return &Client_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *Client_Reset_Call) Run(run func()) *Client_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Reset_Call) Return(_a0 error) *Client_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Reset_Call) RunAndReturn(run func() error) *Client_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// SendMail provides a mock function with given fields: a, from, to, msg
func (_m *Client) SendMail(a smtp.Auth, from string, to []string, msg []byte) error {
	ret := _m.Called(a, from, to, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(smtp.Auth, string, []string, []byte) error); ok {
		r0 = rf(a, from, to, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_SendMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMail'
type Client_SendMail_Call struct {
	*mock.Call
}

// SendMail is a helper method to define mock.On call
//   - a smtp.Auth
//   - from string
//   - to []string
//   - msg []byte
func (_e *Client_Expecter) SendMail(a interface{}, from interface{}, to interface{}, msg interface{}) *Client_SendMail_Call {
	return &Client_SendMail_Call{Call: _e.mock.On("SendMail", a, from, to, msg)}
}

func (_c *Client_SendMail_Call) Run(run func(a smtp.Auth, from string, to []string, msg []byte)) *Client_SendMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(smtp.Auth), args[1].(string), args[2].([]string), args[3].([]byte))
	})
	return _c
}

func (_c *Client_SendMail_Call) Return(_a0 error) *Client_SendMail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_SendMail_Call) RunAndReturn(run func(smtp.Auth, string, []string, []byte) error) *Client_SendMail_Call {
	_c.Call.Return(run)
	return _c
}

// ServerName provides a mock function with given fields:
func (_m *Client) ServerName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Client_ServerName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerName'
type Client_ServerName_Call struct {
	*mock.Call
}

// ServerName is a helper method to define mock.On call
func (_e *Client_Expecter) ServerName() *Client_ServerName_Call {
	return &Client_ServerName_Call{Call: _e.mock.On("ServerName")}
}

func (_c *Client_ServerName_Call) Run(run func()) *Client_ServerName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ServerName_Call) Return(_a0 string) *Client_ServerName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_ServerName_Call) RunAndReturn(run func() string) *Client_ServerName_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: addr
func (_m *Client) Verify(addr string) error {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Client_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - addr string
func (_e *Client_Expecter) Verify(addr interface{}) *Client_Verify_Call {
	return &Client_Verify_Call{Call: _e.mock.On("Verify", addr)}
}

func (_c *Client_Verify_Call) Run(run func(addr string)) *Client_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_Verify_Call) Return(_a0 error) *Client_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Verify_Call) RunAndReturn(run func(string) error) *Client_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
