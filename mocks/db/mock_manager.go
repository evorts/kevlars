// Code generated by mockery v2.42.3. DO NOT EDIT.

package db

import (
	context "context"

	db "github.com/evorts/kevlars/db"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	sqlmock "github.com/DATA-DOG/go-sqlmock"

	sqlx "github.com/jmoiron/sqlx"

	telemetry "github.com/evorts/kevlars/telemetry"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx, opts
func (_m *Manager) Begin(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type Manager_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *sql.TxOptions
func (_e *Manager_Expecter) Begin(ctx interface{}, opts interface{}) *Manager_Begin_Call {
	return &Manager_Begin_Call{Call: _e.mock.On("Begin", ctx, opts)}
}

func (_c *Manager_Begin_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *Manager_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *Manager_Begin_Call) Return(_a0 *sqlx.Tx, _a1 error) *Manager_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_Begin_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)) *Manager_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields: ctx
func (_m *Manager) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Manager_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Manager_Expecter) Connect(ctx interface{}) *Manager_Connect_Call {
	return &Manager_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *Manager_Connect_Call) Run(run func(ctx context.Context)) *Manager_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Manager_Connect_Call) Return(_a0 error) *Manager_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Connect_Call) RunAndReturn(run func(context.Context) error) *Manager_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Driver provides a mock function with given fields:
func (_m *Manager) Driver() db.SupportedDriver {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Driver")
	}

	var r0 db.SupportedDriver
	if rf, ok := ret.Get(0).(func() db.SupportedDriver); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(db.SupportedDriver)
	}

	return r0
}

// Manager_Driver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Driver'
type Manager_Driver_Call struct {
	*mock.Call
}

// Driver is a helper method to define mock.On call
func (_e *Manager_Expecter) Driver() *Manager_Driver_Call {
	return &Manager_Driver_Call{Call: _e.mock.On("Driver")}
}

func (_c *Manager_Driver_Call) Run(run func()) *Manager_Driver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Driver_Call) Return(_a0 db.SupportedDriver) *Manager_Driver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Driver_Call) RunAndReturn(run func() db.SupportedDriver) *Manager_Driver_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *Manager) Exec(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type Manager_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Manager_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *Manager_Exec_Call {
	return &Manager_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Manager_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Manager_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Manager_Exec_Call) Return(_a0 sql.Result, _a1 error) *Manager_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (sql.Result, error)) *Manager_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// MustBegin provides a mock function with given fields: ctx, opts
func (_m *Manager) MustBegin(ctx context.Context, opts *sql.TxOptions) *sqlx.Tx {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for MustBegin")
	}

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	return r0
}

// Manager_MustBegin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustBegin'
type Manager_MustBegin_Call struct {
	*mock.Call
}

// MustBegin is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *sql.TxOptions
func (_e *Manager_Expecter) MustBegin(ctx interface{}, opts interface{}) *Manager_MustBegin_Call {
	return &Manager_MustBegin_Call{Call: _e.mock.On("MustBegin", ctx, opts)}
}

func (_c *Manager_MustBegin_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *Manager_MustBegin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *Manager_MustBegin_Call) Return(_a0 *sqlx.Tx) *Manager_MustBegin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustBegin_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) *sqlx.Tx) *Manager_MustBegin_Call {
	_c.Call.Return(run)
	return _c
}

// MustConnect provides a mock function with given fields: ctx
func (_m *Manager) MustConnect(ctx context.Context) db.Manager {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustConnect")
	}

	var r0 db.Manager
	if rf, ok := ret.Get(0).(func(context.Context) db.Manager); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Manager)
		}
	}

	return r0
}

// Manager_MustConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustConnect'
type Manager_MustConnect_Call struct {
	*mock.Call
}

// MustConnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Manager_Expecter) MustConnect(ctx interface{}) *Manager_MustConnect_Call {
	return &Manager_MustConnect_Call{Call: _e.mock.On("MustConnect", ctx)}
}

func (_c *Manager_MustConnect_Call) Run(run func(ctx context.Context)) *Manager_MustConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Manager_MustConnect_Call) Return(_a0 db.Manager) *Manager_MustConnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustConnect_Call) RunAndReturn(run func(context.Context) db.Manager) *Manager_MustConnect_Call {
	_c.Call.Return(run)
	return _c
}

// MustExec provides a mock function with given fields: ctx, query, args
func (_m *Manager) MustExec(ctx context.Context, query string, args ...interface{}) sql.Result {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MustExec")
	}

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	return r0
}

// Manager_MustExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustExec'
type Manager_MustExec_Call struct {
	*mock.Call
}

// MustExec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Manager_Expecter) MustExec(ctx interface{}, query interface{}, args ...interface{}) *Manager_MustExec_Call {
	return &Manager_MustExec_Call{Call: _e.mock.On("MustExec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Manager_MustExec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Manager_MustExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Manager_MustExec_Call) Return(_a0 sql.Result) *Manager_MustExec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_MustExec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) sql.Result) *Manager_MustExec_Call {
	_c.Call.Return(run)
	return _c
}

// NamedExec provides a mock function with given fields: ctx, query, arg
func (_m *Manager) NamedExec(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	ret := _m.Called(ctx, query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedExec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) sql.Result); ok {
		r0 = rf(ctx, query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_NamedExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedExec'
type Manager_NamedExec_Call struct {
	*mock.Call
}

// NamedExec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - arg interface{}
func (_e *Manager_Expecter) NamedExec(ctx interface{}, query interface{}, arg interface{}) *Manager_NamedExec_Call {
	return &Manager_NamedExec_Call{Call: _e.mock.On("NamedExec", ctx, query, arg)}
}

func (_c *Manager_NamedExec_Call) Run(run func(ctx context.Context, query string, arg interface{})) *Manager_NamedExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Manager_NamedExec_Call) Return(_a0 sql.Result, _a1 error) *Manager_NamedExec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_NamedExec_Call) RunAndReturn(run func(context.Context, string, interface{}) (sql.Result, error)) *Manager_NamedExec_Call {
	_c.Call.Return(run)
	return _c
}

// NamedQuery provides a mock function with given fields: ctx, query, arg
func (_m *Manager) NamedQuery(ctx context.Context, query string, arg interface{}) (*sqlx.Rows, error) {
	ret := _m.Called(ctx, query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedQuery")
	}

	var r0 *sqlx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*sqlx.Rows, error)); ok {
		return rf(ctx, query, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *sqlx.Rows); ok {
		r0 = rf(ctx, query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_NamedQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedQuery'
type Manager_NamedQuery_Call struct {
	*mock.Call
}

// NamedQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - arg interface{}
func (_e *Manager_Expecter) NamedQuery(ctx interface{}, query interface{}, arg interface{}) *Manager_NamedQuery_Call {
	return &Manager_NamedQuery_Call{Call: _e.mock.On("NamedQuery", ctx, query, arg)}
}

func (_c *Manager_NamedQuery_Call) Run(run func(ctx context.Context, query string, arg interface{})) *Manager_NamedQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Manager_NamedQuery_Call) Return(_a0 *sqlx.Rows, _a1 error) *Manager_NamedQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_NamedQuery_Call) RunAndReturn(run func(context.Context, string, interface{}) (*sqlx.Rows, error)) *Manager_NamedQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *Manager) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Manager_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Manager_Expecter) Ping() *Manager_Ping_Call {
	return &Manager_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Manager_Ping_Call) Run(run func()) *Manager_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Ping_Call) Return(_a0 error) *Manager_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Ping_Call) RunAndReturn(run func() error) *Manager_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function with given fields: ctx, query
func (_m *Manager) Prepare(ctx context.Context, query string) (*sqlx.Stmt, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *sqlx.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlx.Stmt, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlx.Stmt); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type Manager_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *Manager_Expecter) Prepare(ctx interface{}, query interface{}) *Manager_Prepare_Call {
	return &Manager_Prepare_Call{Call: _e.mock.On("Prepare", ctx, query)}
}

func (_c *Manager_Prepare_Call) Run(run func(ctx context.Context, query string)) *Manager_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_Prepare_Call) Return(_a0 *sqlx.Stmt, _a1 error) *Manager_Prepare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_Prepare_Call) RunAndReturn(run func(context.Context, string) (*sqlx.Stmt, error)) *Manager_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareNamed provides a mock function with given fields: ctx, query
func (_m *Manager) PrepareNamed(ctx context.Context, query string) (*sqlx.NamedStmt, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareNamed")
	}

	var r0 *sqlx.NamedStmt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sqlx.NamedStmt, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sqlx.NamedStmt); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.NamedStmt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_PrepareNamed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareNamed'
type Manager_PrepareNamed_Call struct {
	*mock.Call
}

// PrepareNamed is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *Manager_Expecter) PrepareNamed(ctx interface{}, query interface{}) *Manager_PrepareNamed_Call {
	return &Manager_PrepareNamed_Call{Call: _e.mock.On("PrepareNamed", ctx, query)}
}

func (_c *Manager_PrepareNamed_Call) Run(run func(ctx context.Context, query string)) *Manager_PrepareNamed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Manager_PrepareNamed_Call) Return(_a0 *sqlx.NamedStmt, _a1 error) *Manager_PrepareNamed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_PrepareNamed_Call) RunAndReturn(run func(context.Context, string) (*sqlx.NamedStmt, error)) *Manager_PrepareNamed_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *Manager) Query(ctx context.Context, query string, args ...interface{}) (*sqlx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sqlx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sqlx.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sqlx.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Manager_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Manager_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *Manager_Query_Call {
	return &Manager_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Manager_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Manager_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Manager_Query_Call) Return(_a0 *sqlx.Rows, _a1 error) *Manager_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (*sqlx.Rows, error)) *Manager_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, query, args
func (_m *Manager) QueryRow(ctx context.Context, query string, args ...interface{}) *sqlx.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sqlx.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sqlx.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Row)
		}
	}

	return r0
}

// Manager_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type Manager_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Manager_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *Manager_QueryRow_Call {
	return &Manager_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Manager_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Manager_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Manager_QueryRow_Call) Return(_a0 *sqlx.Row) *Manager_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *sqlx.Row) *Manager_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rebind provides a mock function with given fields: query
func (_m *Manager) Rebind(query string) string {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Rebind")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Manager_Rebind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rebind'
type Manager_Rebind_Call struct {
	*mock.Call
}

// Rebind is a helper method to define mock.On call
//   - query string
func (_e *Manager_Expecter) Rebind(query interface{}) *Manager_Rebind_Call {
	return &Manager_Rebind_Call{Call: _e.mock.On("Rebind", query)}
}

func (_c *Manager_Rebind_Call) Run(run func(query string)) *Manager_Rebind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_Rebind_Call) Return(_a0 string) *Manager_Rebind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Rebind_Call) RunAndReturn(run func(string) string) *Manager_Rebind_Call {
	_c.Call.Return(run)
	return _c
}

// SetTelemetry provides a mock function with given fields: tm
func (_m *Manager) SetTelemetry(tm telemetry.Manager) db.Manager {
	ret := _m.Called(tm)

	if len(ret) == 0 {
		panic("no return value specified for SetTelemetry")
	}

	var r0 db.Manager
	if rf, ok := ret.Get(0).(func(telemetry.Manager) db.Manager); ok {
		r0 = rf(tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Manager)
		}
	}

	return r0
}

// Manager_SetTelemetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTelemetry'
type Manager_SetTelemetry_Call struct {
	*mock.Call
}

// SetTelemetry is a helper method to define mock.On call
//   - tm telemetry.Manager
func (_e *Manager_Expecter) SetTelemetry(tm interface{}) *Manager_SetTelemetry_Call {
	return &Manager_SetTelemetry_Call{Call: _e.mock.On("SetTelemetry", tm)}
}

func (_c *Manager_SetTelemetry_Call) Run(run func(tm telemetry.Manager)) *Manager_SetTelemetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(telemetry.Manager))
	})
	return _c
}

func (_c *Manager_SetTelemetry_Call) Return(_a0 db.Manager) *Manager_SetTelemetry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_SetTelemetry_Call) RunAndReturn(run func(telemetry.Manager) db.Manager) *Manager_SetTelemetry_Call {
	_c.Call.Return(run)
	return _c
}

// SqlMock provides a mock function with given fields:
func (_m *Manager) SqlMock() sqlmock.Sqlmock {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SqlMock")
	}

	var r0 sqlmock.Sqlmock
	if rf, ok := ret.Get(0).(func() sqlmock.Sqlmock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlmock.Sqlmock)
		}
	}

	return r0
}

// Manager_SqlMock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SqlMock'
type Manager_SqlMock_Call struct {
	*mock.Call
}

// SqlMock is a helper method to define mock.On call
func (_e *Manager_Expecter) SqlMock() *Manager_SqlMock_Call {
	return &Manager_SqlMock_Call{Call: _e.mock.On("SqlMock")}
}

func (_c *Manager_SqlMock_Call) Run(run func()) *Manager_SqlMock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_SqlMock_Call) Return(_a0 sqlmock.Sqlmock) *Manager_SqlMock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_SqlMock_Call) RunAndReturn(run func() sqlmock.Sqlmock) *Manager_SqlMock_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
